"""Make product_id nullable in production_records

Revision ID: 74e05f13d6ec
Revises: 
Create Date: 2025-05-24 23:40:36.475084

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '74e05f13d6ec'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('ledger')
    op.drop_table('order_items')
    op.drop_table('recipe_ingredients_used')
    op.drop_table('recipe_production')
    op.drop_table('indirect_costs')
    op.drop_table('ingredients')
    op.drop_table('groceries')
    op.drop_table('food_cost_items')
    op.drop_table('orders')
    with op.batch_alter_table('production_records', schema=None) as batch_op:
        batch_op.alter_column('product_id',
               existing_type=sa.INTEGER(),
               nullable=True)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('production_records', schema=None) as batch_op:
        batch_op.alter_column('product_id',
               existing_type=sa.INTEGER(),
               nullable=False)

    op.create_table('orders',
    sa.Column('order_id', sa.TEXT(), nullable=True),
    sa.Column('customer_name', sa.TEXT(), nullable=True),
    sa.Column('customer_address', sa.TEXT(), nullable=True),
    sa.Column('order_date', sa.TEXT(), nullable=True),
    sa.Column('total_order_amount', sa.REAL(), nullable=True),
    sa.Column('fulfillment_status', sa.TEXT(), nullable=True),
    sa.Column('tags', sa.TEXT(), nullable=True),
    sa.Column('city', sa.TEXT(), server_default=sa.text("'No City'"), nullable=True),
    sa.PrimaryKeyConstraint('order_id')
    )
    op.create_table('food_cost_items',
    sa.Column('id', sa.INTEGER(), nullable=True),
    sa.Column('user_id', sa.INTEGER(), nullable=False),
    sa.Column('product_name', sa.TEXT(), nullable=False),
    sa.Column('product_code', sa.TEXT(), nullable=False),
    sa.Column('price_per_kg', sa.REAL(), nullable=False),
    sa.Column('raw_material_cost', sa.REAL(), nullable=False),
    sa.Column('waste_cost', sa.REAL(), nullable=True),
    sa.Column('labor_cost', sa.REAL(), nullable=False),
    sa.Column('fixed_cost', sa.REAL(), nullable=False),
    sa.Column('fixed_cost_type', sa.TEXT(), nullable=False),
    sa.Column('kickback_percentage', sa.REAL(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('fee_applies', sa.BOOLEAN(), server_default=sa.text('1'), nullable=True),
    sa.Column('waste_value', sa.REAL(), nullable=True),
    sa.Column('waste_type', sa.TEXT(), nullable=True),
    sa.Column('unit_type', sa.TEXT(), server_default=sa.text("'kg'"), nullable=True),
    sa.Column('fixed_cost_input', sa.REAL(), nullable=True),
    sa.Column('revenue_after_fees', sa.REAL(), nullable=True),
    sa.Column('total_costs', sa.REAL(), nullable=True),
    sa.Column('profit', sa.REAL(), nullable=True),
    sa.Column('profit_margin', sa.REAL(), nullable=True),
    sa.Column('saved_quantity', sa.INTEGER(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('groceries',
    sa.Column('id', sa.INTEGER(), nullable=True),
    sa.Column('product_name', sa.TEXT(), nullable=False),
    sa.Column('brand_name', sa.TEXT(), nullable=False),
    sa.Column('price', sa.REAL(), nullable=False),
    sa.Column('stock_quantity', sa.INTEGER(), nullable=False),
    sa.Column('date', sa.TEXT(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ingredients',
    sa.Column('id', sa.INTEGER(), nullable=True),
    sa.Column('name', sa.TEXT(), nullable=False),
    sa.Column('unit_weight', sa.REAL(), nullable=True),
    sa.Column('unit_cost', sa.REAL(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('indirect_costs',
    sa.Column('id', sa.INTEGER(), nullable=True),
    sa.Column('cost_type', sa.TEXT(), nullable=False),
    sa.Column('amount', sa.REAL(), nullable=False),
    sa.Column('date_recorded', sa.DATE(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('recipe_production',
    sa.Column('production_id', sa.INTEGER(), nullable=True),
    sa.Column('recipe_id', sa.INTEGER(), nullable=False),
    sa.Column('user_id', sa.INTEGER(), nullable=False),
    sa.Column('production_date', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('room', sa.TEXT(), nullable=False),
    sa.Column('team_members', sa.INTEGER(), nullable=False),
    sa.Column('location', sa.TEXT(), nullable=False),
    sa.Column('equipment_cleaned', sa.TEXT(), nullable=False),
    sa.Column('equipment_issues', sa.TEXT(), nullable=True),
    sa.Column('completed', sa.BOOLEAN(), nullable=False),
    sa.Column('yield_before_packaging', sa.REAL(), nullable=True),
    sa.Column('packaged_amount', sa.REAL(), nullable=True),
    sa.Column('notes', sa.TEXT(), nullable=True),
    sa.Column('equipment_inspections', sa.TEXT(), nullable=True),
    sa.ForeignKeyConstraint(['recipe_id'], ['recipes.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.user_id'], ),
    sa.PrimaryKeyConstraint('production_id')
    )
    op.create_table('recipe_ingredients_used',
    sa.Column('id', sa.INTEGER(), nullable=True),
    sa.Column('production_id', sa.INTEGER(), nullable=False),
    sa.Column('ingredient_id', sa.INTEGER(), nullable=False),
    sa.Column('quantity_used', sa.REAL(), nullable=False),
    sa.Column('unit', sa.TEXT(), nullable=False),
    sa.ForeignKeyConstraint(['ingredient_id'], ['ingredients.ingredient_id'], ),
    sa.ForeignKeyConstraint(['production_id'], ['recipe_production.production_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('order_items',
    sa.Column('order_id', sa.INTEGER(), nullable=True),
    sa.Column('product_name', sa.TEXT(), nullable=True),
    sa.Column('quantity', sa.INTEGER(), nullable=True),
    sa.Column('price', sa.REAL(), nullable=True),
    sa.Column('fulfilled_qty', sa.INTEGER(), server_default=sa.text('0'), nullable=True),
    sa.Column('fulfillment_status', sa.TEXT(), server_default=sa.text("'unfulfilled'"), nullable=True),
    sa.ForeignKeyConstraint(['order_id'], ['orders.order_id'], )
    )
    op.create_table('ledger',
    sa.Column('date', sa.TEXT(), nullable=True),
    sa.Column('customer_name', sa.TEXT(), nullable=True),
    sa.Column('customer_address', sa.TEXT(), nullable=True),
    sa.Column('location', sa.TEXT(), nullable=True),
    sa.Column('spicy_mayonnaise_14l', sa.INTEGER(), nullable=True),
    sa.Column('teriyaki_14l', sa.INTEGER(), nullable=True),
    sa.Column('general_tao_14l', sa.INTEGER(), nullable=True),
    sa.Column('marined_chicken', sa.INTEGER(), nullable=True),
    sa.Column('vegan_chicken_3kg', sa.INTEGER(), nullable=True),
    sa.Column('credit', sa.REAL(), nullable=True),
    sa.Column('total_before_shipping', sa.REAL(), nullable=True),
    sa.Column('shipping', sa.REAL(), nullable=True),
    sa.Column('tax_on_shipping', sa.REAL(), nullable=True),
    sa.Column('kickback_8_percent_before_shipping', sa.REAL(), nullable=True),
    sa.Column('amount_to_charge_franchisee', sa.REAL(), nullable=True),
    sa.Column('notes', sa.TEXT(), nullable=True),
    sa.Column('onigiri_soy_base_sauce_14l', sa.INTEGER(), nullable=True),
    sa.Column('yuzu_vinaigrette_14l', sa.INTEGER(), nullable=True),
    sa.Column('egg_sauce_14l', sa.INTEGER(), nullable=True),
    sa.Column('miso_beef_sauce_14l', sa.INTEGER(), nullable=True),
    sa.Column('korean_sauce_14l', sa.INTEGER(), nullable=True),
    sa.Column('onigiri_spicy_mayonnaise_14l', sa.INTEGER(), nullable=True),
    sa.Column('soondubu_paste_4l_lp', sa.INTEGER(), nullable=True),
    sa.Column('bibimbap_sauce_14l', sa.INTEGER(), nullable=True),
    sa.Column('dak_galbi_chicken', sa.INTEGER(), nullable=True),
    sa.Column('ramyum_paste_4l', sa.INTEGER(), nullable=True),
    sa.Column('tteokboki_sauce_14l', sa.INTEGER(), nullable=True),
    sa.Column('dak_ball_sauce_14l', sa.INTEGER(), nullable=True),
    sa.Column('soy_based_sauce_14l', sa.INTEGER(), nullable=True),
    sa.Column('red_pepper_sauce_14l', sa.INTEGER(), nullable=True),
    sa.Column('beef_soy_kg', sa.INTEGER(), nullable=True),
    sa.Column('chicken_soy_kg', sa.INTEGER(), nullable=True),
    sa.Column('pork_soy_kg', sa.INTEGER(), nullable=True),
    sa.Column('pepper_chicken_kg', sa.INTEGER(), nullable=True),
    sa.Column('pork_pepper_kg', sa.INTEGER(), nullable=True),
    sa.Column('salt_pepper_chicken_thighs_cubed_kg', sa.INTEGER(), nullable=True),
    sa.Column('butter_chicken_kg', sa.INTEGER(), nullable=True),
    sa.Column('vua_bbq_pork_kg', sa.INTEGER(), nullable=True),
    sa.Column('vua_grilled_chicken_kg', sa.INTEGER(), nullable=True),
    sa.Column('vua_grilled_pork_Kg', sa.NullType(), nullable=True),
    sa.Column('collection', sa.TEXT(), nullable=True),
    sa.Column('ramyun_paste_4l', sa.NullType(), server_default=sa.text('0'), nullable=True),
    sa.Column('soondubu_paste_4l', sa.NullType(), server_default=sa.text('0'), nullable=True),
    sa.Column('butter_chicken', sa.NullType(), server_default=sa.text('0'), nullable=True),
    sa.Column('salt_pepper_chicken', sa.NullType(), server_default=sa.text('0'), nullable=True),
    sa.Column('pork_pepper', sa.NullType(), server_default=sa.text('0'), nullable=True),
    sa.Column('pepper_chicken', sa.NullType(), server_default=sa.text('0'), nullable=True),
    sa.Column('pork_soy', sa.NullType(), server_default=sa.text('0'), nullable=True),
    sa.Column('chicken_soy', sa.NullType(), server_default=sa.text('0'), nullable=True),
    sa.Column('beef_soy', sa.NullType(), server_default=sa.text('0'), nullable=True),
    sa.Column('spicy_mayo_ganadara_14l', sa.NullType(), server_default=sa.text('0'), nullable=True)
    )
    # ### end Alembic commands ###
